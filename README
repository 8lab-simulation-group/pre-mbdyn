命名規則

変数名:　すべて小文字、アンダーバー使用　例：input_file, node_reference, num_blade
　変数名は多少長くなっても、一目で何の値なのか分かる名前をつける。
　多少長くてもVSCodeのサジェストがあるので特に苦労はしないはずです。
　Vec3d　クラスを用いたベクトルにて、位置ベクトルは先頭にx_, 相対位置ベクトルは先頭にr_をつけています。
　また鉛直距離はvd_,水平距離にはhd_のラベルをつけています。今後合理的で洗練されたルールが思いつけば変更するかもしれません。

  いくつか略称として変数名で用いているものがある。　number -> num,  platform -> ptfm,  sections -> sec

 FASTのインプットファイルのパラメータの説明は、マニュアルのP70前後に書いてる

 
クラス名：　頭大文字、アンダーバー不使用　例　:　Class InputData

メンバ関数名：　動詞形　例　get_value(), set_data()


1, データをファイルよりインプットする
Class InputData
テキストファイルを読み込み、そこから変数を保管するクラスとなっている。
このクラスのオブジェクトからデータを取り出すときは、メンバ変数dGet("name")を使用する。

取得を想定する変数名をvectorで保存
その数分だけ変数のコンテナを動的確保
変数名とコンテナのポインタを連想型で連結
変数名に応じて連想型で格納
変数名に応じて連想型から取得

2, 各セクションごとのデータオブジェクトを作る
setterとgetter

その2のオブジェクトを加工するクラスを作る

その2のオブジェクトのgetterをつかってmbdynデータセットを付くるオブジェクトを作る


2, インプットデータよりnodeやjointのオブジェクトを用意する

3, 位置、姿勢、慣性特性、剛性を計算する

4, MBDynの規格に合わせて出力する


class cordinate:
メンバ変数：座標系の初期位置、姿勢、速度、角速度
メソッド：　setter getter

class node
メンバ変数　reference_cordinate, relative_cordinate, 

class section (node)を継承
メンバ変数　mass, inertia tensor, kmatrix, cmatrix, jointの種類と接続するnode

class joint 派生クラスをいくつか作って、親クラスのjointでまとめて扱う

必要なentitiesの数を判定してメモリ確保、jointの拘束関係を取得＜＝今後beam要素を使う際も対応できるようにする。

各entitieのメンバ変数を計算

それらをmbdynの規格に合わせて出力